State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On LT shift to state 90
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On EOF shift to state 111
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On BEGIN shift to state 112
-- On variable_expression shift to state 160
-- On main shift to state 162
-- On list_instanciation shift to state 39
-- On instruction_block shift to state 163
-- On declaration_block shift to state 165
## Reductions:

State 1:
## Known stack suffix:
## TAIL
## LR(1) items:
variable_expression -> TAIL . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 89
-- On list_instanciation shift to state 39
## Reductions:

State 2:
## Known stack suffix:
## SUB
## LR(1) items:
variable_expression -> SUB . INT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On INT shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## SUB INT
## LR(1) items:
variable_expression -> SUB INT . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 88
-- On list_instanciation shift to state 39
## Reductions:

State 4:
## Known stack suffix:
## SIN
## LR(1) items:
variable_expression -> SIN . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 87
-- On list_instanciation shift to state 39
## Reductions:

State 5:
## Known stack suffix:
## POSITION_ACCESSOR
## LR(1) items:
variable_expression -> POSITION_ACCESSOR . L_PAR variable_expression COMMA variable_expression R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On L_PAR shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## POSITION_ACCESSOR L_PAR
## LR(1) items:
variable_expression -> POSITION_ACCESSOR L_PAR . variable_expression COMMA variable_expression R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 83
-- On list_instanciation shift to state 39
## Reductions:

State 7:
## Known stack suffix:
## POINT
## LR(1) items:
variable_expression -> POINT . L_PAR variable_expression COMMA variable_expression R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On L_PAR shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## POINT L_PAR
## LR(1) items:
variable_expression -> POINT L_PAR . variable_expression COMMA variable_expression R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 79
-- On list_instanciation shift to state 39
## Reductions:

State 9:
## Known stack suffix:
## PI
## LR(1) items:
variable_expression -> PI . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> PI

State 10:
## Known stack suffix:
## NOT
## LR(1) items:
variable_expression -> NOT . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 78
-- On list_instanciation shift to state 39
## Reductions:

State 11:
## Known stack suffix:
## L_SQ_BRK
## LR(1) items:
list_instanciation -> L_SQ_BRK . content_list_instanciation R_SQ_BRK [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
list_instanciation -> L_SQ_BRK . R_SQ_BRK [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On R_SQ_BRK shift to state 12
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 73
-- On list_instanciation shift to state 39
-- On content_list_instanciation shift to state 76
## Reductions:

State 12:
## Known stack suffix:
## L_SQ_BRK R_SQ_BRK
## LR(1) items:
list_instanciation -> L_SQ_BRK R_SQ_BRK . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production list_instanciation -> L_SQ_BRK R_SQ_BRK

State 13:
## Known stack suffix:
## L_PAR
## LR(1) items:
variable_expression -> L_PAR . variable_expression R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 71
-- On list_instanciation shift to state 39
## Reductions:

State 14:
## Known stack suffix:
## INT
## LR(1) items:
variable_expression -> INT . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> INT

State 15:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
variable_expression -> IDENTIFIER . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> IDENTIFIER

State 16:
## Known stack suffix:
## HEAD
## LR(1) items:
variable_expression -> HEAD . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 70
-- On list_instanciation shift to state 39
## Reductions:

State 17:
## Known stack suffix:
## FLOOR
## LR(1) items:
variable_expression -> FLOOR . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 69
-- On list_instanciation shift to state 39
## Reductions:

State 18:
## Known stack suffix:
## FLOAT_OF_INT
## LR(1) items:
variable_expression -> FLOAT_OF_INT . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 68
-- On list_instanciation shift to state 39
## Reductions:

State 19:
## Known stack suffix:
## FLOAT
## LR(1) items:
variable_expression -> FLOAT . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> FLOAT

State 20:
## Known stack suffix:
## COS
## LR(1) items:
variable_expression -> COS . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 67
-- On list_instanciation shift to state 39
## Reductions:

State 21:
## Known stack suffix:
## COLOR_ACCESSOR
## LR(1) items:
variable_expression -> COLOR_ACCESSOR . L_PAR variable_expression COMMA variable_expression COMMA variable_expression R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On L_PAR shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## COLOR_ACCESSOR L_PAR
## LR(1) items:
variable_expression -> COLOR_ACCESSOR L_PAR . variable_expression COMMA variable_expression COMMA variable_expression R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 24
-- On list_instanciation shift to state 39
## Reductions:

State 23:
## Known stack suffix:
## BOOL
## LR(1) items:
variable_expression -> BOOL . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> BOOL

State 24:
## Known stack suffix:
## COLOR_ACCESSOR L_PAR variable_expression
## LR(1) items:
variable_expression -> COLOR_ACCESSOR L_PAR variable_expression . COMMA variable_expression COMMA variable_expression R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MUL variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On COMMA shift to state 60
-- On AND shift to state 65
-- On ADD shift to state 48
## Reductions:

State 25:
## Known stack suffix:
## variable_expression SUB
## LR(1) items:
variable_expression -> variable_expression SUB . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 26
-- On list_instanciation shift to state 39
## Reductions:

State 26:
## Known stack suffix:
## variable_expression SUB variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression SUB variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> variable_expression SUB variable_expression

State 27:
## Known stack suffix:
## variable_expression MUL
## LR(1) items:
variable_expression -> variable_expression MUL . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 28
-- On list_instanciation shift to state 39
## Reductions:

State 28:
## Known stack suffix:
## variable_expression MUL variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression MUL variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On DOT shift to state 29
-- On DEF shift to state 37
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DIV COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> variable_expression MUL variable_expression

State 29:
## Known stack suffix:
## variable_expression DOT
## LR(1) items:
variable_expression -> variable_expression DOT . COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression DOT . POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression DOT . X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression DOT . Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression DOT . BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression DOT . RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression DOT . GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On Y_ACCESSOR shift to state 30
-- On X_ACCESSOR shift to state 31
-- On RED_ACCESSOR shift to state 32
-- On POSITION_ACCESSOR shift to state 33
-- On GREEN_ACCESSOR shift to state 34
-- On COLOR_ACCESSOR shift to state 35
-- On BLUE_ACCESSOR shift to state 36
## Reductions:

State 30:
## Known stack suffix:
## variable_expression DOT Y_ACCESSOR
## LR(1) items:
variable_expression -> variable_expression DOT Y_ACCESSOR . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> variable_expression DOT Y_ACCESSOR

State 31:
## Known stack suffix:
## variable_expression DOT X_ACCESSOR
## LR(1) items:
variable_expression -> variable_expression DOT X_ACCESSOR . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> variable_expression DOT X_ACCESSOR

State 32:
## Known stack suffix:
## variable_expression DOT RED_ACCESSOR
## LR(1) items:
variable_expression -> variable_expression DOT RED_ACCESSOR . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> variable_expression DOT RED_ACCESSOR

State 33:
## Known stack suffix:
## variable_expression DOT POSITION_ACCESSOR
## LR(1) items:
variable_expression -> variable_expression DOT POSITION_ACCESSOR . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> variable_expression DOT POSITION_ACCESSOR

State 34:
## Known stack suffix:
## variable_expression DOT GREEN_ACCESSOR
## LR(1) items:
variable_expression -> variable_expression DOT GREEN_ACCESSOR . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> variable_expression DOT GREEN_ACCESSOR

State 35:
## Known stack suffix:
## variable_expression DOT COLOR_ACCESSOR
## LR(1) items:
variable_expression -> variable_expression DOT COLOR_ACCESSOR . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> variable_expression DOT COLOR_ACCESSOR

State 36:
## Known stack suffix:
## variable_expression DOT BLUE_ACCESSOR
## LR(1) items:
variable_expression -> variable_expression DOT BLUE_ACCESSOR . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> variable_expression DOT BLUE_ACCESSOR

State 37:
## Known stack suffix:
## variable_expression DEF
## LR(1) items:
variable_expression -> variable_expression DEF . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 38
-- On list_instanciation shift to state 39
## Reductions:

State 38:
## Known stack suffix:
## variable_expression DEF variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression DEF variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> variable_expression DEF variable_expression

State 39:
## Known stack suffix:
## list_instanciation
## LR(1) items:
variable_expression -> list_instanciation . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> list_instanciation

State 40:
## Known stack suffix:
## variable_expression MOD
## LR(1) items:
variable_expression -> variable_expression MOD . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 41
-- On list_instanciation shift to state 39
## Reductions:

State 41:
## Known stack suffix:
## variable_expression MOD variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression MOD variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On DOT shift to state 29
-- On DEF shift to state 37
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DIV COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> variable_expression MOD variable_expression

State 42:
## Known stack suffix:
## variable_expression DIV
## LR(1) items:
variable_expression -> variable_expression DIV . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 43
-- On list_instanciation shift to state 39
## Reductions:

State 43:
## Known stack suffix:
## variable_expression DIV variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression DIV variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On DOT shift to state 29
-- On DEF shift to state 37
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DIV COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> variable_expression DIV variable_expression

State 44:
## Known stack suffix:
## variable_expression OR
## LR(1) items:
variable_expression -> variable_expression OR . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 45
-- On list_instanciation shift to state 39
## Reductions:

State 45:
## Known stack suffix:
## variable_expression OR variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression OR variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On ADD shift to state 48
## Reductions:
-- On TO STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR LIST INT_TYPE IF FOREACH FOR FLOAT_TYPE EOF DRAW COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND
--   reduce production variable_expression -> variable_expression OR variable_expression

State 46:
## Known stack suffix:
## variable_expression NE
## LR(1) items:
variable_expression -> variable_expression NE . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 47
-- On list_instanciation shift to state 39
## Reductions:

State 47:
## Known stack suffix:
## variable_expression NE variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression NE variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On ADD shift to state 48
## Reductions:
-- On TO STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND
--   reduce production variable_expression -> variable_expression NE variable_expression

State 48:
## Known stack suffix:
## variable_expression ADD
## LR(1) items:
variable_expression -> variable_expression ADD . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 49
-- On list_instanciation shift to state 39
## Reductions:

State 49:
## Known stack suffix:
## variable_expression ADD variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression ADD variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> variable_expression ADD variable_expression

State 50:
## Known stack suffix:
## variable_expression LT
## LR(1) items:
variable_expression -> variable_expression LT . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 51
-- On list_instanciation shift to state 39
## Reductions:

State 51:
## Known stack suffix:
## variable_expression LT variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression LT variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On ADD shift to state 48
## Reductions:
-- On TO STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND
--   reduce production variable_expression -> variable_expression LT variable_expression

State 52:
## Known stack suffix:
## variable_expression LE
## LR(1) items:
variable_expression -> variable_expression LE . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 53
-- On list_instanciation shift to state 39
## Reductions:

State 53:
## Known stack suffix:
## variable_expression LE variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression LE variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On ADD shift to state 48
## Reductions:
-- On TO STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND
--   reduce production variable_expression -> variable_expression LE variable_expression

State 54:
## Known stack suffix:
## variable_expression GT
## LR(1) items:
variable_expression -> variable_expression GT . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 55
-- On list_instanciation shift to state 39
## Reductions:

State 55:
## Known stack suffix:
## variable_expression GT variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression GT variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On ADD shift to state 48
## Reductions:
-- On TO STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND
--   reduce production variable_expression -> variable_expression GT variable_expression

State 56:
## Known stack suffix:
## variable_expression GE
## LR(1) items:
variable_expression -> variable_expression GE . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 57
-- On list_instanciation shift to state 39
## Reductions:

State 57:
## Known stack suffix:
## variable_expression GE variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression GE variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On ADD shift to state 48
## Reductions:
-- On TO STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND
--   reduce production variable_expression -> variable_expression GE variable_expression

State 58:
## Known stack suffix:
## variable_expression EQ
## LR(1) items:
variable_expression -> variable_expression EQ . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 59
-- On list_instanciation shift to state 39
## Reductions:

State 59:
## Known stack suffix:
## variable_expression EQ variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression EQ variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On ADD shift to state 48
## Reductions:
-- On TO STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND
--   reduce production variable_expression -> variable_expression EQ variable_expression

State 60:
## Known stack suffix:
## COLOR_ACCESSOR L_PAR variable_expression COMMA
## LR(1) items:
variable_expression -> COLOR_ACCESSOR L_PAR variable_expression COMMA . variable_expression COMMA variable_expression R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 61
-- On list_instanciation shift to state 39
## Reductions:

State 61:
## Known stack suffix:
## COLOR_ACCESSOR L_PAR variable_expression COMMA variable_expression
## LR(1) items:
variable_expression -> COLOR_ACCESSOR L_PAR variable_expression COMMA variable_expression . COMMA variable_expression R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MUL variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On COMMA shift to state 62
-- On AND shift to state 65
-- On ADD shift to state 48
## Reductions:

State 62:
## Known stack suffix:
## COLOR_ACCESSOR L_PAR variable_expression COMMA variable_expression COMMA
## LR(1) items:
variable_expression -> COLOR_ACCESSOR L_PAR variable_expression COMMA variable_expression COMMA . variable_expression R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 63
-- On list_instanciation shift to state 39
## Reductions:

State 63:
## Known stack suffix:
## COLOR_ACCESSOR L_PAR variable_expression COMMA variable_expression COMMA variable_expression
## LR(1) items:
variable_expression -> COLOR_ACCESSOR L_PAR variable_expression COMMA variable_expression COMMA variable_expression . R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MUL variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On R_PAR shift to state 64
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On AND shift to state 65
-- On ADD shift to state 48
## Reductions:

State 64:
## Known stack suffix:
## COLOR_ACCESSOR L_PAR variable_expression COMMA variable_expression COMMA variable_expression R_PAR
## LR(1) items:
variable_expression -> COLOR_ACCESSOR L_PAR variable_expression COMMA variable_expression COMMA variable_expression R_PAR . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> COLOR_ACCESSOR L_PAR variable_expression COMMA variable_expression COMMA variable_expression R_PAR

State 65:
## Known stack suffix:
## variable_expression AND
## LR(1) items:
variable_expression -> variable_expression AND . variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 66
-- On list_instanciation shift to state 39
## Reductions:

State 66:
## Known stack suffix:
## variable_expression AND variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression AND variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On ADD shift to state 48
## Reductions:
-- On TO STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR LIST INT_TYPE IF FOREACH FOR FLOAT_TYPE EOF DRAW COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND
--   reduce production variable_expression -> variable_expression AND variable_expression

State 67:
## Known stack suffix:
## COS variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> COS variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On DOT shift to state 29
-- On DEF shift to state 37
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DIV COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> COS variable_expression

State 68:
## Known stack suffix:
## FLOAT_OF_INT variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> FLOAT_OF_INT variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On DOT shift to state 29
-- On DEF shift to state 37
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DIV COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> FLOAT_OF_INT variable_expression

State 69:
## Known stack suffix:
## FLOOR variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> FLOOR variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On DOT shift to state 29
-- On DEF shift to state 37
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DIV COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> FLOOR variable_expression

State 70:
## Known stack suffix:
## HEAD variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> HEAD variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On DOT shift to state 29
-- On DEF shift to state 37
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DIV COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> HEAD variable_expression

State 71:
## Known stack suffix:
## L_PAR variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> L_PAR variable_expression . R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On R_PAR shift to state 72
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On AND shift to state 65
-- On ADD shift to state 48
## Reductions:

State 72:
## Known stack suffix:
## L_PAR variable_expression R_PAR
## LR(1) items:
variable_expression -> L_PAR variable_expression R_PAR . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> L_PAR variable_expression R_PAR

State 73:
## Known stack suffix:
## variable_expression
## LR(1) items:
content_list_instanciation -> variable_expression . COMMA content_list_instanciation [ R_SQ_BRK ]
content_list_instanciation -> variable_expression . [ R_SQ_BRK ]
variable_expression -> variable_expression . MUL variable_expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB R_SQ_BRK OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On COMMA shift to state 74
-- On AND shift to state 65
-- On ADD shift to state 48
## Reductions:
-- On R_SQ_BRK
--   reduce production content_list_instanciation -> variable_expression

State 74:
## Known stack suffix:
## variable_expression COMMA
## LR(1) items:
content_list_instanciation -> variable_expression COMMA . content_list_instanciation [ R_SQ_BRK ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 73
-- On list_instanciation shift to state 39
-- On content_list_instanciation shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## variable_expression COMMA content_list_instanciation
## LR(1) items:
content_list_instanciation -> variable_expression COMMA content_list_instanciation . [ R_SQ_BRK ]
## Transitions:
## Reductions:
-- On R_SQ_BRK
--   reduce production content_list_instanciation -> variable_expression COMMA content_list_instanciation

State 76:
## Known stack suffix:
## L_SQ_BRK content_list_instanciation
## LR(1) items:
list_instanciation -> L_SQ_BRK content_list_instanciation . R_SQ_BRK [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On R_SQ_BRK shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## L_SQ_BRK content_list_instanciation R_SQ_BRK
## LR(1) items:
list_instanciation -> L_SQ_BRK content_list_instanciation R_SQ_BRK . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production list_instanciation -> L_SQ_BRK content_list_instanciation R_SQ_BRK

State 78:
## Known stack suffix:
## NOT variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> NOT variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On DOT shift to state 29
-- On DEF shift to state 37
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DIV COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> NOT variable_expression

State 79:
## Known stack suffix:
## POINT L_PAR variable_expression
## LR(1) items:
variable_expression -> POINT L_PAR variable_expression . COMMA variable_expression R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MUL variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On COMMA shift to state 80
-- On AND shift to state 65
-- On ADD shift to state 48
## Reductions:

State 80:
## Known stack suffix:
## POINT L_PAR variable_expression COMMA
## LR(1) items:
variable_expression -> POINT L_PAR variable_expression COMMA . variable_expression R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 81
-- On list_instanciation shift to state 39
## Reductions:

State 81:
## Known stack suffix:
## POINT L_PAR variable_expression COMMA variable_expression
## LR(1) items:
variable_expression -> POINT L_PAR variable_expression COMMA variable_expression . R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MUL variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On R_PAR shift to state 82
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On AND shift to state 65
-- On ADD shift to state 48
## Reductions:

State 82:
## Known stack suffix:
## POINT L_PAR variable_expression COMMA variable_expression R_PAR
## LR(1) items:
variable_expression -> POINT L_PAR variable_expression COMMA variable_expression R_PAR . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> POINT L_PAR variable_expression COMMA variable_expression R_PAR

State 83:
## Known stack suffix:
## POSITION_ACCESSOR L_PAR variable_expression
## LR(1) items:
variable_expression -> POSITION_ACCESSOR L_PAR variable_expression . COMMA variable_expression R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MUL variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On COMMA shift to state 84
-- On AND shift to state 65
-- On ADD shift to state 48
## Reductions:

State 84:
## Known stack suffix:
## POSITION_ACCESSOR L_PAR variable_expression COMMA
## LR(1) items:
variable_expression -> POSITION_ACCESSOR L_PAR variable_expression COMMA . variable_expression R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 85
-- On list_instanciation shift to state 39
## Reductions:

State 85:
## Known stack suffix:
## POSITION_ACCESSOR L_PAR variable_expression COMMA variable_expression
## LR(1) items:
variable_expression -> POSITION_ACCESSOR L_PAR variable_expression COMMA variable_expression . R_PAR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MUL variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On R_PAR shift to state 86
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On AND shift to state 65
-- On ADD shift to state 48
## Reductions:

State 86:
## Known stack suffix:
## POSITION_ACCESSOR L_PAR variable_expression COMMA variable_expression R_PAR
## LR(1) items:
variable_expression -> POSITION_ACCESSOR L_PAR variable_expression COMMA variable_expression R_PAR . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> POSITION_ACCESSOR L_PAR variable_expression COMMA variable_expression R_PAR

State 87:
## Known stack suffix:
## SIN variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> SIN variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On DOT shift to state 29
-- On DEF shift to state 37
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DIV COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> SIN variable_expression

State 88:
## Known stack suffix:
## SUB INT variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> SUB INT variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On DOT shift to state 29
-- On DEF shift to state 37
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DIV COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> SUB INT variable_expression

State 89:
## Known stack suffix:
## TAIL variable_expression
## LR(1) items:
variable_expression -> variable_expression . MUL variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> TAIL variable_expression . [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DOT DIV DEF COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On DOT shift to state 29
-- On DEF shift to state 37
## Reductions:
-- On TO SUB STEP R_SQ_BRK R_PAR PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ EOF DRAW DIV COPY COMMA COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD
--   reduce production variable_expression -> TAIL variable_expression

State 90:
## Known stack suffix:
## LT
## LR(1) items:
declaration_block -> LT . declaration_lines GT [ BEGIN ]
declaration_block -> LT . GT [ BEGIN ]
## Transitions:
-- On POSITION_ACCESSOR shift to state 91
-- On POINT shift to state 92
-- On LIST shift to state 93
-- On INT_TYPE shift to state 95
-- On GT shift to state 101
-- On FLOAT_TYPE shift to state 96
-- On COLOR_ACCESSOR shift to state 97
-- On BOOL_TYPE shift to state 98
-- On simple_data_type_declaration shift to state 102
-- On declaration_lines shift to state 106
-- On declaration_line shift to state 108
## Reductions:

State 91:
## Known stack suffix:
## POSITION_ACCESSOR
## LR(1) items:
simple_data_type_declaration -> POSITION_ACCESSOR . [ R_PAR L_PAR ]
## Transitions:
## Reductions:
-- On R_PAR L_PAR
--   reduce production simple_data_type_declaration -> POSITION_ACCESSOR

State 92:
## Known stack suffix:
## POINT
## LR(1) items:
simple_data_type_declaration -> POINT . [ R_PAR L_PAR ]
## Transitions:
## Reductions:
-- On R_PAR L_PAR
--   reduce production simple_data_type_declaration -> POINT

State 93:
## Known stack suffix:
## LIST
## LR(1) items:
simple_data_type_declaration -> LIST . L_PAR simple_data_type_declaration R_PAR [ R_PAR L_PAR ]
## Transitions:
-- On L_PAR shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## LIST L_PAR
## LR(1) items:
simple_data_type_declaration -> LIST L_PAR . simple_data_type_declaration R_PAR [ R_PAR L_PAR ]
## Transitions:
-- On POSITION_ACCESSOR shift to state 91
-- On POINT shift to state 92
-- On LIST shift to state 93
-- On INT_TYPE shift to state 95
-- On FLOAT_TYPE shift to state 96
-- On COLOR_ACCESSOR shift to state 97
-- On BOOL_TYPE shift to state 98
-- On simple_data_type_declaration shift to state 99
## Reductions:

State 95:
## Known stack suffix:
## INT_TYPE
## LR(1) items:
simple_data_type_declaration -> INT_TYPE . [ R_PAR L_PAR ]
## Transitions:
## Reductions:
-- On R_PAR L_PAR
--   reduce production simple_data_type_declaration -> INT_TYPE

State 96:
## Known stack suffix:
## FLOAT_TYPE
## LR(1) items:
simple_data_type_declaration -> FLOAT_TYPE . [ R_PAR L_PAR ]
## Transitions:
## Reductions:
-- On R_PAR L_PAR
--   reduce production simple_data_type_declaration -> FLOAT_TYPE

State 97:
## Known stack suffix:
## COLOR_ACCESSOR
## LR(1) items:
simple_data_type_declaration -> COLOR_ACCESSOR . [ R_PAR L_PAR ]
## Transitions:
## Reductions:
-- On R_PAR L_PAR
--   reduce production simple_data_type_declaration -> COLOR_ACCESSOR

State 98:
## Known stack suffix:
## BOOL_TYPE
## LR(1) items:
simple_data_type_declaration -> BOOL_TYPE . [ R_PAR L_PAR ]
## Transitions:
## Reductions:
-- On R_PAR L_PAR
--   reduce production simple_data_type_declaration -> BOOL_TYPE

State 99:
## Known stack suffix:
## LIST L_PAR simple_data_type_declaration
## LR(1) items:
simple_data_type_declaration -> LIST L_PAR simple_data_type_declaration . R_PAR [ R_PAR L_PAR ]
## Transitions:
-- On R_PAR shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## LIST L_PAR simple_data_type_declaration R_PAR
## LR(1) items:
simple_data_type_declaration -> LIST L_PAR simple_data_type_declaration R_PAR . [ R_PAR L_PAR ]
## Transitions:
## Reductions:
-- On R_PAR L_PAR
--   reduce production simple_data_type_declaration -> LIST L_PAR simple_data_type_declaration R_PAR

State 101:
## Known stack suffix:
## LT GT
## LR(1) items:
declaration_block -> LT GT . [ BEGIN ]
## Transitions:
## Reductions:
-- On BEGIN
--   reduce production declaration_block -> LT GT

State 102:
## Known stack suffix:
## simple_data_type_declaration
## LR(1) items:
declaration_line -> simple_data_type_declaration . L_PAR IDENTIFIER R_PAR [ SEMICOLON GT ]
## Transitions:
-- On L_PAR shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## simple_data_type_declaration L_PAR
## LR(1) items:
declaration_line -> simple_data_type_declaration L_PAR . IDENTIFIER R_PAR [ SEMICOLON GT ]
## Transitions:
-- On IDENTIFIER shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## simple_data_type_declaration L_PAR IDENTIFIER
## LR(1) items:
declaration_line -> simple_data_type_declaration L_PAR IDENTIFIER . R_PAR [ SEMICOLON GT ]
## Transitions:
-- On R_PAR shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## simple_data_type_declaration L_PAR IDENTIFIER R_PAR
## LR(1) items:
declaration_line -> simple_data_type_declaration L_PAR IDENTIFIER R_PAR . [ SEMICOLON GT ]
## Transitions:
## Reductions:
-- On SEMICOLON GT
--   reduce production declaration_line -> simple_data_type_declaration L_PAR IDENTIFIER R_PAR

State 106:
## Known stack suffix:
## LT declaration_lines
## LR(1) items:
declaration_block -> LT declaration_lines . GT [ BEGIN ]
## Transitions:
-- On GT shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## LT declaration_lines GT
## LR(1) items:
declaration_block -> LT declaration_lines GT . [ BEGIN ]
## Transitions:
## Reductions:
-- On BEGIN
--   reduce production declaration_block -> LT declaration_lines GT

State 108:
## Known stack suffix:
## declaration_line
## LR(1) items:
declaration_lines -> declaration_line . SEMICOLON declaration_lines [ GT ]
declaration_lines -> declaration_line . [ GT ]
## Transitions:
-- On SEMICOLON shift to state 109
## Reductions:
-- On GT
--   reduce production declaration_lines -> declaration_line

State 109:
## Known stack suffix:
## declaration_line SEMICOLON
## LR(1) items:
declaration_lines -> declaration_line SEMICOLON . declaration_lines [ GT ]
## Transitions:
-- On POSITION_ACCESSOR shift to state 91
-- On POINT shift to state 92
-- On LIST shift to state 93
-- On INT_TYPE shift to state 95
-- On FLOAT_TYPE shift to state 96
-- On COLOR_ACCESSOR shift to state 97
-- On BOOL_TYPE shift to state 98
-- On simple_data_type_declaration shift to state 102
-- On declaration_lines shift to state 110
-- On declaration_line shift to state 108
## Reductions:

State 110:
## Known stack suffix:
## declaration_line SEMICOLON declaration_lines
## LR(1) items:
declaration_lines -> declaration_line SEMICOLON declaration_lines . [ GT ]
## Transitions:
## Reductions:
-- On GT
--   reduce production declaration_lines -> declaration_line SEMICOLON declaration_lines

State 111:
## Known stack suffix:
## EOF
## LR(1) items:
main -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> EOF

State 112:
## Known stack suffix:
## BEGIN
## LR(1) items:
instruction_block -> BEGIN . instruction_list END [ SEMICOLON EOF END ELSE ]
instruction_block -> BEGIN . END [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On PRINT shift to state 113
-- On POSITION_ACCESSOR shift to state 91
-- On POINT shift to state 92
-- On LIST shift to state 93
-- On INT_TYPE shift to state 95
-- On IF shift to state 117
-- On FOREACH shift to state 119
-- On FOR shift to state 123
-- On FLOAT_TYPE shift to state 96
-- On END shift to state 154
-- On DRAW shift to state 131
-- On COPY shift to state 135
-- On COLOR_ACCESSOR shift to state 97
-- On BOOL_TYPE shift to state 98
-- On BEGIN shift to state 112
-- On simple_data_type_declaration shift to state 141
-- On instruction_list shift to state 155
-- On instruction_if shift to state 145
-- On instruction_foreach shift to state 146
-- On instruction_for shift to state 147
-- On instruction_block shift to state 148
-- On instruction shift to state 157
## Reductions:

State 113:
## Known stack suffix:
## PRINT
## LR(1) items:
instruction -> PRINT . L_PAR variable_expression R_PAR [ SEMICOLON END ELSE ]
## Transitions:
-- On L_PAR shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## PRINT L_PAR
## LR(1) items:
instruction -> PRINT L_PAR . variable_expression R_PAR [ SEMICOLON END ELSE ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 115
-- On list_instanciation shift to state 39
## Reductions:

State 115:
## Known stack suffix:
## PRINT L_PAR variable_expression
## LR(1) items:
instruction -> PRINT L_PAR variable_expression . R_PAR [ SEMICOLON END ELSE ]
variable_expression -> variable_expression . MUL variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On R_PAR shift to state 116
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On AND shift to state 65
-- On ADD shift to state 48
## Reductions:

State 116:
## Known stack suffix:
## PRINT L_PAR variable_expression R_PAR
## LR(1) items:
instruction -> PRINT L_PAR variable_expression R_PAR . [ SEMICOLON END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON END ELSE
--   reduce production instruction -> PRINT L_PAR variable_expression R_PAR

State 117:
## Known stack suffix:
## IF
## LR(1) items:
instruction_if -> IF . variable_expression instruction [ SEMICOLON END ELSE ]
instruction_if -> IF . variable_expression instruction ELSE instruction [ SEMICOLON END ELSE ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 118
-- On list_instanciation shift to state 39
## Reductions:

State 118:
## Known stack suffix:
## IF variable_expression
## LR(1) items:
instruction_if -> IF variable_expression . instruction [ SEMICOLON END ELSE ]
instruction_if -> IF variable_expression . instruction ELSE instruction [ SEMICOLON END ELSE ]
variable_expression -> variable_expression . MUL variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On PRINT shift to state 113
-- On POSITION_ACCESSOR shift to state 91
-- On POINT shift to state 92
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LIST shift to state 93
-- On LE shift to state 52
-- On INT_TYPE shift to state 95
-- On IF shift to state 117
-- On GT shift to state 54
-- On GE shift to state 56
-- On FOREACH shift to state 119
-- On FOR shift to state 123
-- On FLOAT_TYPE shift to state 96
-- On EQ shift to state 58
-- On DRAW shift to state 131
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On COPY shift to state 135
-- On COLOR_ACCESSOR shift to state 97
-- On BOOL_TYPE shift to state 98
-- On BEGIN shift to state 112
-- On AND shift to state 65
-- On ADD shift to state 48
-- On simple_data_type_declaration shift to state 141
-- On instruction_if shift to state 145
-- On instruction_foreach shift to state 146
-- On instruction_for shift to state 147
-- On instruction_block shift to state 148
-- On instruction shift to state 151
## Reductions:

State 119:
## Known stack suffix:
## FOREACH
## LR(1) items:
instruction_foreach -> FOREACH . IDENTIFIER IN variable_expression instruction [ SEMICOLON END ELSE ]
## Transitions:
-- On IDENTIFIER shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## FOREACH IDENTIFIER
## LR(1) items:
instruction_foreach -> FOREACH IDENTIFIER . IN variable_expression instruction [ SEMICOLON END ELSE ]
## Transitions:
-- On IN shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## FOREACH IDENTIFIER IN
## LR(1) items:
instruction_foreach -> FOREACH IDENTIFIER IN . variable_expression instruction [ SEMICOLON END ELSE ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 122
-- On list_instanciation shift to state 39
## Reductions:

State 122:
## Known stack suffix:
## FOREACH IDENTIFIER IN variable_expression
## LR(1) items:
instruction_foreach -> FOREACH IDENTIFIER IN variable_expression . instruction [ SEMICOLON END ELSE ]
variable_expression -> variable_expression . MUL variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On PRINT shift to state 113
-- On POSITION_ACCESSOR shift to state 91
-- On POINT shift to state 92
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LIST shift to state 93
-- On LE shift to state 52
-- On INT_TYPE shift to state 95
-- On IF shift to state 117
-- On GT shift to state 54
-- On GE shift to state 56
-- On FOREACH shift to state 119
-- On FOR shift to state 123
-- On FLOAT_TYPE shift to state 96
-- On EQ shift to state 58
-- On DRAW shift to state 131
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On COPY shift to state 135
-- On COLOR_ACCESSOR shift to state 97
-- On BOOL_TYPE shift to state 98
-- On BEGIN shift to state 112
-- On AND shift to state 65
-- On ADD shift to state 48
-- On simple_data_type_declaration shift to state 141
-- On instruction_if shift to state 145
-- On instruction_foreach shift to state 146
-- On instruction_for shift to state 147
-- On instruction_block shift to state 148
-- On instruction shift to state 150
## Reductions:

State 123:
## Known stack suffix:
## FOR
## LR(1) items:
instruction_for -> FOR . IDENTIFIER FROM variable_expression TO variable_expression STEP variable_expression instruction [ SEMICOLON END ELSE ]
## Transitions:
-- On IDENTIFIER shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## FOR IDENTIFIER
## LR(1) items:
instruction_for -> FOR IDENTIFIER . FROM variable_expression TO variable_expression STEP variable_expression instruction [ SEMICOLON END ELSE ]
## Transitions:
-- On FROM shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## FOR IDENTIFIER FROM
## LR(1) items:
instruction_for -> FOR IDENTIFIER FROM . variable_expression TO variable_expression STEP variable_expression instruction [ SEMICOLON END ELSE ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 126
-- On list_instanciation shift to state 39
## Reductions:

State 126:
## Known stack suffix:
## FOR IDENTIFIER FROM variable_expression
## LR(1) items:
instruction_for -> FOR IDENTIFIER FROM variable_expression . TO variable_expression STEP variable_expression instruction [ SEMICOLON END ELSE ]
variable_expression -> variable_expression . MUL variable_expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ TO SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
## Transitions:
-- On TO shift to state 127
-- On SUB shift to state 25
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On AND shift to state 65
-- On ADD shift to state 48
## Reductions:

State 127:
## Known stack suffix:
## FOR IDENTIFIER FROM variable_expression TO
## LR(1) items:
instruction_for -> FOR IDENTIFIER FROM variable_expression TO . variable_expression STEP variable_expression instruction [ SEMICOLON END ELSE ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 128
-- On list_instanciation shift to state 39
## Reductions:

State 128:
## Known stack suffix:
## FOR IDENTIFIER FROM variable_expression TO variable_expression
## LR(1) items:
instruction_for -> FOR IDENTIFIER FROM variable_expression TO variable_expression . STEP variable_expression instruction [ SEMICOLON END ELSE ]
variable_expression -> variable_expression . MUL variable_expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB STEP OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On STEP shift to state 129
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On AND shift to state 65
-- On ADD shift to state 48
## Reductions:

State 129:
## Known stack suffix:
## FOR IDENTIFIER FROM variable_expression TO variable_expression STEP
## LR(1) items:
instruction_for -> FOR IDENTIFIER FROM variable_expression TO variable_expression STEP . variable_expression instruction [ SEMICOLON END ELSE ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 130
-- On list_instanciation shift to state 39
## Reductions:

State 130:
## Known stack suffix:
## FOR IDENTIFIER FROM variable_expression TO variable_expression STEP variable_expression
## LR(1) items:
instruction_for -> FOR IDENTIFIER FROM variable_expression TO variable_expression STEP variable_expression . instruction [ SEMICOLON END ELSE ]
variable_expression -> variable_expression . MUL variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB PRINT POSITION_ACCESSOR POINT OR NE MUL MOD LT LIST LE INT_TYPE IF GT GE FOREACH FOR FLOAT_TYPE EQ DRAW DOT DIV DEF COPY COLOR_ACCESSOR BOOL_TYPE BEGIN AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On PRINT shift to state 113
-- On POSITION_ACCESSOR shift to state 91
-- On POINT shift to state 92
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LIST shift to state 93
-- On LE shift to state 52
-- On INT_TYPE shift to state 95
-- On IF shift to state 117
-- On GT shift to state 54
-- On GE shift to state 56
-- On FOREACH shift to state 119
-- On FOR shift to state 123
-- On FLOAT_TYPE shift to state 96
-- On EQ shift to state 58
-- On DRAW shift to state 131
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On COPY shift to state 135
-- On COLOR_ACCESSOR shift to state 97
-- On BOOL_TYPE shift to state 98
-- On BEGIN shift to state 112
-- On AND shift to state 65
-- On ADD shift to state 48
-- On simple_data_type_declaration shift to state 141
-- On instruction_if shift to state 145
-- On instruction_foreach shift to state 146
-- On instruction_for shift to state 147
-- On instruction_block shift to state 148
-- On instruction shift to state 149
## Reductions:

State 131:
## Known stack suffix:
## DRAW
## LR(1) items:
instruction -> DRAW . L_PAR variable_expression R_PAR [ SEMICOLON END ELSE ]
## Transitions:
-- On L_PAR shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## DRAW L_PAR
## LR(1) items:
instruction -> DRAW L_PAR . variable_expression R_PAR [ SEMICOLON END ELSE ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 133
-- On list_instanciation shift to state 39
## Reductions:

State 133:
## Known stack suffix:
## DRAW L_PAR variable_expression
## LR(1) items:
instruction -> DRAW L_PAR variable_expression . R_PAR [ SEMICOLON END ELSE ]
variable_expression -> variable_expression . MUL variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On R_PAR shift to state 134
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On AND shift to state 65
-- On ADD shift to state 48
## Reductions:

State 134:
## Known stack suffix:
## DRAW L_PAR variable_expression R_PAR
## LR(1) items:
instruction -> DRAW L_PAR variable_expression R_PAR . [ SEMICOLON END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON END ELSE
--   reduce production instruction -> DRAW L_PAR variable_expression R_PAR

State 135:
## Known stack suffix:
## COPY
## LR(1) items:
instruction -> COPY . L_PAR variable_expression COMMA variable_expression R_PAR [ SEMICOLON END ELSE ]
## Transitions:
-- On L_PAR shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## COPY L_PAR
## LR(1) items:
instruction -> COPY L_PAR . variable_expression COMMA variable_expression R_PAR [ SEMICOLON END ELSE ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 137
-- On list_instanciation shift to state 39
## Reductions:

State 137:
## Known stack suffix:
## COPY L_PAR variable_expression
## LR(1) items:
instruction -> COPY L_PAR variable_expression . COMMA variable_expression R_PAR [ SEMICOLON END ELSE ]
variable_expression -> variable_expression . MUL variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF COMMA AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On COMMA shift to state 138
-- On AND shift to state 65
-- On ADD shift to state 48
## Reductions:

State 138:
## Known stack suffix:
## COPY L_PAR variable_expression COMMA
## LR(1) items:
instruction -> COPY L_PAR variable_expression COMMA . variable_expression R_PAR [ SEMICOLON END ELSE ]
## Transitions:
-- On TAIL shift to state 1
-- On SUB shift to state 2
-- On SIN shift to state 4
-- On POSITION_ACCESSOR shift to state 5
-- On POINT shift to state 7
-- On PI shift to state 9
-- On NOT shift to state 10
-- On L_SQ_BRK shift to state 11
-- On L_PAR shift to state 13
-- On INT shift to state 14
-- On IDENTIFIER shift to state 15
-- On HEAD shift to state 16
-- On FLOOR shift to state 17
-- On FLOAT_OF_INT shift to state 18
-- On FLOAT shift to state 19
-- On COS shift to state 20
-- On COLOR_ACCESSOR shift to state 21
-- On BOOL shift to state 23
-- On variable_expression shift to state 139
-- On list_instanciation shift to state 39
## Reductions:

State 139:
## Known stack suffix:
## COPY L_PAR variable_expression COMMA variable_expression
## LR(1) items:
instruction -> COPY L_PAR variable_expression COMMA variable_expression . R_PAR [ SEMICOLON END ELSE ]
variable_expression -> variable_expression . MUL variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB R_PAR OR NE MUL MOD LT LE GT GE EQ DOT DIV DEF AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On R_PAR shift to state 140
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On AND shift to state 65
-- On ADD shift to state 48
## Reductions:

State 140:
## Known stack suffix:
## COPY L_PAR variable_expression COMMA variable_expression R_PAR
## LR(1) items:
instruction -> COPY L_PAR variable_expression COMMA variable_expression R_PAR . [ SEMICOLON END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON END ELSE
--   reduce production instruction -> COPY L_PAR variable_expression COMMA variable_expression R_PAR

State 141:
## Known stack suffix:
## simple_data_type_declaration
## LR(1) items:
instruction -> simple_data_type_declaration . L_PAR IDENTIFIER R_PAR [ SEMICOLON END ELSE ]
## Transitions:
-- On L_PAR shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## simple_data_type_declaration L_PAR
## LR(1) items:
instruction -> simple_data_type_declaration L_PAR . IDENTIFIER R_PAR [ SEMICOLON END ELSE ]
## Transitions:
-- On IDENTIFIER shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## simple_data_type_declaration L_PAR IDENTIFIER
## LR(1) items:
instruction -> simple_data_type_declaration L_PAR IDENTIFIER . R_PAR [ SEMICOLON END ELSE ]
## Transitions:
-- On R_PAR shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## simple_data_type_declaration L_PAR IDENTIFIER R_PAR
## LR(1) items:
instruction -> simple_data_type_declaration L_PAR IDENTIFIER R_PAR . [ SEMICOLON END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON END ELSE
--   reduce production instruction -> simple_data_type_declaration L_PAR IDENTIFIER R_PAR

State 145:
## Known stack suffix:
## instruction_if
## LR(1) items:
instruction -> instruction_if . [ SEMICOLON END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON END ELSE
--   reduce production instruction -> instruction_if

State 146:
## Known stack suffix:
## instruction_foreach
## LR(1) items:
instruction -> instruction_foreach . [ SEMICOLON END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON END ELSE
--   reduce production instruction -> instruction_foreach

State 147:
## Known stack suffix:
## instruction_for
## LR(1) items:
instruction -> instruction_for . [ SEMICOLON END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON END ELSE
--   reduce production instruction -> instruction_for

State 148:
## Known stack suffix:
## instruction_block
## LR(1) items:
instruction -> instruction_block . [ SEMICOLON END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON END ELSE
--   reduce production instruction -> instruction_block

State 149:
## Known stack suffix:
## FOR IDENTIFIER FROM variable_expression TO variable_expression STEP variable_expression instruction
## LR(1) items:
instruction_for -> FOR IDENTIFIER FROM variable_expression TO variable_expression STEP variable_expression instruction . [ SEMICOLON END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON END ELSE
--   reduce production instruction_for -> FOR IDENTIFIER FROM variable_expression TO variable_expression STEP variable_expression instruction

State 150:
## Known stack suffix:
## FOREACH IDENTIFIER IN variable_expression instruction
## LR(1) items:
instruction_foreach -> FOREACH IDENTIFIER IN variable_expression instruction . [ SEMICOLON END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON END ELSE
--   reduce production instruction_foreach -> FOREACH IDENTIFIER IN variable_expression instruction

State 151:
## Known stack suffix:
## IF variable_expression instruction
## LR(1) items:
instruction_if -> IF variable_expression instruction . [ SEMICOLON END ELSE ]
instruction_if -> IF variable_expression instruction . ELSE instruction [ SEMICOLON END ELSE ]
## Transitions:
-- On ELSE shift to state 152
## Reductions:
-- On SEMICOLON END
--   reduce production instruction_if -> IF variable_expression instruction

State 152:
## Known stack suffix:
## IF variable_expression instruction ELSE
## LR(1) items:
instruction_if -> IF variable_expression instruction ELSE . instruction [ SEMICOLON END ELSE ]
## Transitions:
-- On PRINT shift to state 113
-- On POSITION_ACCESSOR shift to state 91
-- On POINT shift to state 92
-- On LIST shift to state 93
-- On INT_TYPE shift to state 95
-- On IF shift to state 117
-- On FOREACH shift to state 119
-- On FOR shift to state 123
-- On FLOAT_TYPE shift to state 96
-- On DRAW shift to state 131
-- On COPY shift to state 135
-- On COLOR_ACCESSOR shift to state 97
-- On BOOL_TYPE shift to state 98
-- On BEGIN shift to state 112
-- On simple_data_type_declaration shift to state 141
-- On instruction_if shift to state 145
-- On instruction_foreach shift to state 146
-- On instruction_for shift to state 147
-- On instruction_block shift to state 148
-- On instruction shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## IF variable_expression instruction ELSE instruction
## LR(1) items:
instruction_if -> IF variable_expression instruction ELSE instruction . [ SEMICOLON END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON END ELSE
--   reduce production instruction_if -> IF variable_expression instruction ELSE instruction

State 154:
## Known stack suffix:
## BEGIN END
## LR(1) items:
instruction_block -> BEGIN END . [ SEMICOLON EOF END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON EOF END ELSE
--   reduce production instruction_block -> BEGIN END

State 155:
## Known stack suffix:
## BEGIN instruction_list
## LR(1) items:
instruction_block -> BEGIN instruction_list . END [ SEMICOLON EOF END ELSE ]
## Transitions:
-- On END shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## BEGIN instruction_list END
## LR(1) items:
instruction_block -> BEGIN instruction_list END . [ SEMICOLON EOF END ELSE ]
## Transitions:
## Reductions:
-- On SEMICOLON EOF END ELSE
--   reduce production instruction_block -> BEGIN instruction_list END

State 157:
## Known stack suffix:
## instruction
## LR(1) items:
instruction_list -> instruction . SEMICOLON instruction_list [ END ]
instruction_list -> instruction . [ END ]
## Transitions:
-- On SEMICOLON shift to state 158
## Reductions:
-- On END
--   reduce production instruction_list -> instruction

State 158:
## Known stack suffix:
## instruction SEMICOLON
## LR(1) items:
instruction_list -> instruction SEMICOLON . instruction_list [ END ]
## Transitions:
-- On PRINT shift to state 113
-- On POSITION_ACCESSOR shift to state 91
-- On POINT shift to state 92
-- On LIST shift to state 93
-- On INT_TYPE shift to state 95
-- On IF shift to state 117
-- On FOREACH shift to state 119
-- On FOR shift to state 123
-- On FLOAT_TYPE shift to state 96
-- On DRAW shift to state 131
-- On COPY shift to state 135
-- On COLOR_ACCESSOR shift to state 97
-- On BOOL_TYPE shift to state 98
-- On BEGIN shift to state 112
-- On simple_data_type_declaration shift to state 141
-- On instruction_list shift to state 159
-- On instruction_if shift to state 145
-- On instruction_foreach shift to state 146
-- On instruction_for shift to state 147
-- On instruction_block shift to state 148
-- On instruction shift to state 157
## Reductions:

State 159:
## Known stack suffix:
## instruction SEMICOLON instruction_list
## LR(1) items:
instruction_list -> instruction SEMICOLON instruction_list . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production instruction_list -> instruction SEMICOLON instruction_list

State 160:
## Known stack suffix:
## variable_expression
## LR(1) items:
main -> variable_expression . EOF [ # ]
variable_expression -> variable_expression . MUL variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DIV variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . ADD variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . SUB variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . MOD variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . EQ variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . NE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LT variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GT variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . LE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . GE variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . AND variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . OR variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT COLOR_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT POSITION_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT X_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT Y_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT BLUE_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT RED_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DOT GREEN_ACCESSOR [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
variable_expression -> variable_expression . DEF variable_expression [ SUB OR NE MUL MOD LT LE GT GE EQ EOF DOT DIV DEF AND ADD ]
## Transitions:
-- On SUB shift to state 25
-- On OR shift to state 44
-- On NE shift to state 46
-- On MUL shift to state 27
-- On MOD shift to state 40
-- On LT shift to state 50
-- On LE shift to state 52
-- On GT shift to state 54
-- On GE shift to state 56
-- On EQ shift to state 58
-- On EOF shift to state 161
-- On DOT shift to state 29
-- On DIV shift to state 42
-- On DEF shift to state 37
-- On AND shift to state 65
-- On ADD shift to state 48
## Reductions:

State 161:
## Known stack suffix:
## variable_expression EOF
## LR(1) items:
main -> variable_expression EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> variable_expression EOF

State 162:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

State 163:
## Known stack suffix:
## instruction_block
## LR(1) items:
main -> instruction_block . EOF [ # ]
## Transitions:
-- On EOF shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## instruction_block EOF
## LR(1) items:
main -> instruction_block EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> instruction_block EOF

State 165:
## Known stack suffix:
## declaration_block
## LR(1) items:
main -> declaration_block . instruction_block EOF [ # ]
## Transitions:
-- On BEGIN shift to state 112
-- On instruction_block shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## declaration_block instruction_block
## LR(1) items:
main -> declaration_block instruction_block . EOF [ # ]
## Transitions:
-- On EOF shift to state 167
## Reductions:

State 167:
## Known stack suffix:
## declaration_block instruction_block EOF
## LR(1) items:
main -> declaration_block instruction_block EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> declaration_block instruction_block EOF

