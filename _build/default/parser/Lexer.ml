# 1 "parser/Lexer.mll"
 
    open Parser
    exception Error of string

# 7 "parser/Lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\191\255\077\000\096\000\019\000\117\000\022\000\029\000\
    \024\000\039\000\218\255\219\255\115\000\038\000\030\000\045\000\
    \054\000\046\000\124\000\229\255\230\255\231\255\232\255\233\255\
    \234\255\191\000\005\000\003\000\013\000\242\255\122\000\044\000\
    \050\000\246\255\248\255\249\255\250\255\251\255\252\255\039\000\
    \255\255\253\255\001\000\254\255\087\000\245\255\244\255\085\000\
    \072\000\079\000\084\000\243\255\121\000\215\255\119\000\115\000\
    \214\255\238\255\241\255\237\255\236\255\210\000\120\000\120\000\
    \120\000\125\000\140\000\135\000\134\000\000\000\141\000\151\000\
    \001\000\149\000\145\000\152\000\228\255\224\255\168\000\173\000\
    \172\000\168\000\205\255\164\000\207\255\159\000\174\000\198\255\
    \160\000\227\255\180\000\178\000\226\255\162\000\206\255\175\000\
    \173\000\225\255\181\000\199\255\175\000\163\000\174\000\223\255\
    \172\000\221\255\212\255\187\000\179\000\222\255\179\000\200\255\
    \195\255\187\000\188\000\184\000\220\255\179\000\202\255\186\000\
    \181\000\201\255\198\000\217\255\198\000\199\000\191\000\216\255\
    \187\000\204\000\213\255\204\000\209\255\209\000\188\000\211\255\
    \192\000\210\255\197\255\194\000\194\000\203\255\045\001\253\255\
    \030\000\255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\063\000\061\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\255\255\255\255\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\020\000\064\000\016\000\015\000\255\255\064\000\064\000\
    \064\000\255\255\255\255\255\255\255\255\255\255\255\255\008\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\062\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\059\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\047\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \051\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \002\000\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\042\000\000\000\255\255\000\000\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\000\000\255\255\255\255\000\000\
    \255\255\000\000\255\255\255\255\000\000\255\255\000\000\255\255\
    \255\255\000\000\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\000\000\
    \000\000\255\255\255\255\255\255\000\000\255\255\000\000\255\255\
    \255\255\000\000\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\000\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\255\255\255\255\000\000\143\000\000\000\
    \255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\038\000\037\000\043\000\000\000\038\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \038\000\000\000\000\000\000\000\000\000\033\000\000\000\000\000\
    \020\000\019\000\034\000\036\000\023\000\035\000\025\000\039\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\026\000\024\000\028\000\029\000\027\000\060\000\
    \059\000\032\000\030\000\014\000\006\000\007\000\018\000\008\000\
    \016\000\005\000\057\000\058\000\004\000\146\000\017\000\031\000\
    \012\000\041\000\009\000\013\000\015\000\000\000\042\000\000\000\
    \011\000\010\000\000\000\022\000\000\000\021\000\000\000\070\000\
    \073\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\061\000\139\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
    \133\000\128\000\124\000\129\000\122\000\100\000\095\000\108\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\107\000\090\000\094\000\088\000\046\000\093\000\
    \044\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\045\000\054\000\052\000\050\000\003\000\
    \051\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\137\000\112\000\062\000\053\000\047\000\
    \055\000\056\000\114\000\136\000\085\000\113\000\048\000\083\000\
    \065\000\049\000\078\000\064\000\066\000\068\000\063\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\077\000\069\000\067\000\071\000\072\000\074\000\075\000\
    \040\000\255\255\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\076\000\079\000\080\000\081\000\
    \082\000\084\000\086\000\087\000\089\000\091\000\092\000\098\000\
    \096\000\097\000\099\000\102\000\106\000\104\000\105\000\101\000\
    \110\000\109\000\103\000\111\000\119\000\115\000\117\000\118\000\
    \120\000\121\000\123\000\125\000\126\000\127\000\131\000\116\000\
    \130\000\132\000\134\000\135\000\138\000\140\000\141\000\145\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\042\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
    \027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\028\000\028\000\000\000\144\000\000\000\000\000\
    \000\000\039\000\000\000\000\000\000\000\255\255\039\000\255\255\
    \000\000\000\000\255\255\000\000\255\255\000\000\255\255\069\000\
    \072\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\002\000\004\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
    \006\000\007\000\008\000\007\000\009\000\014\000\015\000\013\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\013\000\016\000\015\000\017\000\031\000\015\000\
    \032\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\044\000\047\000\048\000\049\000\003\000\
    \050\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\005\000\012\000\018\000\052\000\030\000\
    \054\000\055\000\012\000\005\000\062\000\012\000\030\000\063\000\
    \018\000\030\000\064\000\018\000\065\000\066\000\018\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\067\000\068\000\066\000\070\000\071\000\073\000\074\000\
    \000\000\042\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\075\000\078\000\079\000\080\000\
    \081\000\083\000\085\000\086\000\088\000\090\000\091\000\093\000\
    \095\000\096\000\098\000\100\000\101\000\102\000\104\000\100\000\
    \107\000\108\000\100\000\110\000\113\000\114\000\115\000\117\000\
    \119\000\120\000\122\000\124\000\125\000\126\000\128\000\114\000\
    \129\000\131\000\133\000\134\000\136\000\139\000\140\000\142\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\142\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\142\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 10 "parser/Lexer.mll"
                        ( EOF )
# 232 "parser/Lexer.ml"

  | 1 ->
# 11 "parser/Lexer.mll"
                          (Lexing.new_line lexbuf; token lexbuf)
# 237 "parser/Lexer.ml"

  | 2 ->
# 12 "parser/Lexer.mll"
                        (commentary lexbuf)
# 242 "parser/Lexer.ml"

  | 3 ->
# 13 "parser/Lexer.mll"
                        (token lexbuf)
# 247 "parser/Lexer.ml"

  | 4 ->
# 14 "parser/Lexer.mll"
                        ( Lexing.new_line lexbuf ; token lexbuf )
# 252 "parser/Lexer.ml"

  | 5 ->
# 15 "parser/Lexer.mll"
                        ( ADD )
# 257 "parser/Lexer.ml"

  | 6 ->
# 16 "parser/Lexer.mll"
                        ( SUB )
# 262 "parser/Lexer.ml"

  | 7 ->
# 17 "parser/Lexer.mll"
                        ( MUL )
# 267 "parser/Lexer.ml"

  | 8 ->
# 18 "parser/Lexer.mll"
                        ( DIV )
# 272 "parser/Lexer.ml"

  | 9 ->
# 19 "parser/Lexer.mll"
                        ( MOD )
# 277 "parser/Lexer.ml"

  | 10 ->
# 20 "parser/Lexer.mll"
                        ( AND )
# 282 "parser/Lexer.ml"

  | 11 ->
# 21 "parser/Lexer.mll"
                        ( OR )
# 287 "parser/Lexer.ml"

  | 12 ->
# 22 "parser/Lexer.mll"
                        ( BOOL_TYPE )
# 292 "parser/Lexer.ml"

  | 13 ->
# 23 "parser/Lexer.mll"
                        ( EQ )
# 297 "parser/Lexer.ml"

  | 14 ->
# 24 "parser/Lexer.mll"
                        ( NE )
# 302 "parser/Lexer.ml"

  | 15 ->
# 25 "parser/Lexer.mll"
                        ( LT )
# 307 "parser/Lexer.ml"

  | 16 ->
# 26 "parser/Lexer.mll"
                        ( GT )
# 312 "parser/Lexer.ml"

  | 17 ->
# 27 "parser/Lexer.mll"
                        ( LE )
# 317 "parser/Lexer.ml"

  | 18 ->
# 28 "parser/Lexer.mll"
                        ( GE )
# 322 "parser/Lexer.ml"

  | 19 ->
# 29 "parser/Lexer.mll"
                        ( DEF )
# 327 "parser/Lexer.ml"

  | 20 ->
# 30 "parser/Lexer.mll"
                        ( DOT )
# 332 "parser/Lexer.ml"

  | 21 ->
# 31 "parser/Lexer.mll"
                        ( SEMICOLON )
# 337 "parser/Lexer.ml"

  | 22 ->
# 32 "parser/Lexer.mll"
                        ( COMMA )
# 342 "parser/Lexer.ml"

  | 23 ->
# 33 "parser/Lexer.mll"
                        ( L_SQ_BRK )
# 347 "parser/Lexer.ml"

  | 24 ->
# 34 "parser/Lexer.mll"
                        ( R_SQ_BRK )
# 352 "parser/Lexer.ml"

  | 25 ->
# 35 "parser/Lexer.mll"
                        ( L_PAR )
# 357 "parser/Lexer.ml"

  | 26 ->
# 36 "parser/Lexer.mll"
                        ( R_PAR )
# 362 "parser/Lexer.ml"

  | 27 ->
# 37 "parser/Lexer.mll"
                        ( FLOAT_OF_INT )
# 367 "parser/Lexer.ml"

  | 28 ->
# 38 "parser/Lexer.mll"
                        ( NOT )
# 372 "parser/Lexer.ml"

  | 29 ->
# 39 "parser/Lexer.mll"
                        ( HEAD )
# 377 "parser/Lexer.ml"

  | 30 ->
# 40 "parser/Lexer.mll"
                        ( TAIL )
# 382 "parser/Lexer.ml"

  | 31 ->
# 41 "parser/Lexer.mll"
                        ( FLOOR )
# 387 "parser/Lexer.ml"

  | 32 ->
# 42 "parser/Lexer.mll"
                        ( COS )
# 392 "parser/Lexer.ml"

  | 33 ->
# 43 "parser/Lexer.mll"
                        ( SIN )
# 397 "parser/Lexer.ml"

  | 34 ->
# 44 "parser/Lexer.mll"
                        ( COLOR_ACCESSOR )
# 402 "parser/Lexer.ml"

  | 35 ->
# 45 "parser/Lexer.mll"
                        ( POSITION_ACCESSOR )
# 407 "parser/Lexer.ml"

  | 36 ->
# 46 "parser/Lexer.mll"
                        ( X_ACCESSOR )
# 412 "parser/Lexer.ml"

  | 37 ->
# 47 "parser/Lexer.mll"
                        ( Y_ACCESSOR )
# 417 "parser/Lexer.ml"

  | 38 ->
# 48 "parser/Lexer.mll"
                        ( RED_ACCESSOR )
# 422 "parser/Lexer.ml"

  | 39 ->
# 49 "parser/Lexer.mll"
                        ( GREEN_ACCESSOR )
# 427 "parser/Lexer.ml"

  | 40 ->
# 50 "parser/Lexer.mll"
                        ( BLUE_ACCESSOR )
# 432 "parser/Lexer.ml"

  | 41 ->
# 51 "parser/Lexer.mll"
                        ( BEGIN )
# 437 "parser/Lexer.ml"

  | 42 ->
# 52 "parser/Lexer.mll"
                        ( END )
# 442 "parser/Lexer.ml"

  | 43 ->
# 53 "parser/Lexer.mll"
                        ( COPY )
# 447 "parser/Lexer.ml"

  | 44 ->
# 54 "parser/Lexer.mll"
                        ( DRAW )
# 452 "parser/Lexer.ml"

  | 45 ->
# 55 "parser/Lexer.mll"
                        ( IF )
# 457 "parser/Lexer.ml"

  | 46 ->
# 56 "parser/Lexer.mll"
                        ( ELSE )
# 462 "parser/Lexer.ml"

  | 47 ->
# 57 "parser/Lexer.mll"
                        ( FOR )
# 467 "parser/Lexer.ml"

  | 48 ->
# 58 "parser/Lexer.mll"
                        ( FROM )
# 472 "parser/Lexer.ml"

  | 49 ->
# 59 "parser/Lexer.mll"
                        ( TO )
# 477 "parser/Lexer.ml"

  | 50 ->
# 60 "parser/Lexer.mll"
                        ( FOREACH )
# 482 "parser/Lexer.ml"

  | 51 ->
# 61 "parser/Lexer.mll"
                        ( IN )
# 487 "parser/Lexer.ml"

  | 52 ->
# 62 "parser/Lexer.mll"
                        ( LIST )
# 492 "parser/Lexer.ml"

  | 53 ->
# 63 "parser/Lexer.mll"
                        ( POINT )
# 497 "parser/Lexer.ml"

  | 54 ->
# 64 "parser/Lexer.mll"
                        ( PRINT )
# 502 "parser/Lexer.ml"

  | 55 ->
# 65 "parser/Lexer.mll"
                        ( STEP )
# 507 "parser/Lexer.ml"

  | 56 ->
# 66 "parser/Lexer.mll"
                        ( BOOL(true) )
# 512 "parser/Lexer.ml"

  | 57 ->
# 67 "parser/Lexer.mll"
                        ( BOOL(false) )
# 517 "parser/Lexer.ml"

  | 58 ->
# 68 "parser/Lexer.mll"
                        ( INT_TYPE )
# 522 "parser/Lexer.ml"

  | 59 ->
# 69 "parser/Lexer.mll"
                        ( FLOAT_TYPE )
# 527 "parser/Lexer.ml"

  | 60 ->
# 70 "parser/Lexer.mll"
                        ( PI )
# 532 "parser/Lexer.ml"

  | 61 ->
let
# 73 "parser/Lexer.mll"
                              s
# 538 "parser/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 73 "parser/Lexer.mll"
                                 ( IDENTIFIER(s) )
# 542 "parser/Lexer.ml"

  | 62 ->
let
# 74 "parser/Lexer.mll"
                               s
# 548 "parser/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 74 "parser/Lexer.mll"
                                 (FLOAT(try float_of_string s with Failure _ -> raise (Error(s)) ))
# 552 "parser/Lexer.ml"

  | 63 ->
let
# 75 "parser/Lexer.mll"
                  s
# 558 "parser/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 75 "parser/Lexer.mll"
                        ( INT(try int_of_string s with Failure _ ->(let pos = Lexing.lexeme_start_p lexbuf in raise (Error(Format.sprintf "Line %d, char %d ,Read: '%s'. It is not a valid integer" pos.pos_lnum (pos.pos_cnum - pos.pos_bol +1) s)) )))
# 562 "parser/Lexer.ml"

  | 64 ->
let
# 77 "parser/Lexer.mll"
           s
# 568 "parser/Lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 77 "parser/Lexer.mll"
                        ( let pos = Lexing.lexeme_start_p lexbuf in raise (Error(Format.sprintf "Line %d, char %d ,Read: '%c'. It is not an acceptable character" pos.pos_lnum (pos.pos_cnum - pos.pos_bol +1) s)) )
# 572 "parser/Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and commentary lexbuf =
   __ocaml_lex_commentary_rec lexbuf 142
and __ocaml_lex_commentary_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 80 "parser/Lexer.mll"
                (Lexing.new_line lexbuf; commentary lexbuf)
# 584 "parser/Lexer.ml"

  | 1 ->
# 81 "parser/Lexer.mll"
                ( token lexbuf )
# 589 "parser/Lexer.ml"

  | 2 ->
# 82 "parser/Lexer.mll"
        ( commentary lexbuf )
# 594 "parser/Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_commentary_rec lexbuf __ocaml_lex_state

;;

